TODO

* Incorporate appropriate information from the ggtags readme file.

* List components to be installed by demo, and the corresponding
  debian packages.

* Determine whether ebrowse.org is cruft.

* Determine whether anything useful is in c-ide-irony_bak.org.

* Edit animated gifs to be more likely to be legible and totally
  visible on a  screen.

* Take all code from the demo repository, incorporate it into the org
  files of this repository as babel-org source, from which to build
  the demo. That way the code will always be in sync with the
  snippets of the org files.

* Is cscope integration coveered?
  (require 'xcscope)
  (setq cscope-do-not-update-database t)

* ido-imenu
  (defun ido-imenu ()
       "Update the imenu index and then use ido to select a symbol to
     navigate to.
     Symbols matching the text at point are put first in the completion
     list."
       (interactive)
       (imenu--make-index-alist)
       (let ((name-and-pos '())
             (symbol-names '()))
         (flet ((addsymbols
                 (symbol-list)
                 (when (listp symbol-list)
                   (dolist (symbol symbol-list)
                     (let ((name nil) (position nil))
                       (cond
                        ((and (listp symbol) (imenu--subalist-p symbol))
                         (addsymbols symbol))

                        ((listp symbol)
                         (setq name (car symbol))
                         (setq position (cdr symbol)))

                        ((stringp symbol)
                         (setq name symbol)
                         (setq position
                               (get-text-property 1 'org-imenu-marker
     symbol))))

                       (unless (or (null position) (null name))
                         (add-to-list 'symbol-names name)
                         (add-to-list 'name-and-pos (cons name
     position))))))))
           (addsymbols imenu--index-alist))
         ;; If there are matching symbols at point, put them at the
     beginning
         ;; of `symbol-names'.
         (let ((symbol-at-point (thing-at-point 'symbol)))
           (when symbol-at-point
             (let* ((regexp (concat (regexp-quote symbol-at-point) "$"))
                    (matching-symbols
                     (delq nil (mapcar
                                (lambda (symbol)
                                  (if (string-match regexp symbol)
     symbol))
                                symbol-names))))
               (when matching-symbols
                 (sort matching-symbols (lambda (a b) (> (length a)
     (length b))))
                 (mapc
                  (lambda (symbol)
                    (setq symbol-names (cons symbol (delete symbol
     symbol-names))))
                  matching-symbols)))))
         (let* ((selected-symbol (ido-completing-read "Symbol? "
     symbol-names))
                (position (cdr (assoc selected-symbol name-and-pos))))
           (push-mark)
           (if (overlayp position)
               (goto-char (overlay-start position))
             (goto-char position)))))
     (global-set-key (kbd "C-x C-i") 'ido-imenu)

* icicles, imenu-anywhere, imenu+, imenus
